(in-package :cl-user)
(named-readtables:in-readtable rutilsx:rutilsx-readtable)

(defclass ap-nertagger2 (ap-nertagger)
  ()
  (:documentation
   ""))

(defmethod extract-fs ((model ap-nertagger2) &rest args)
  (macrolet ((word-props (i word)
               `(when (and ,word (not (blankp ,word)))
                  (make-fs (,(strcat i " word-has-numbers")
                            (some 'digit-char-p ,word))
                           (,(strcat i " word-upcase")
                            (every 'upper-case-p ,word))
                           (,(strcat i " word-capcase")
                            (upper-case-p (? ,word 0)))
                           (,(strcat i " word-camcase")
                            (and (some 'upper-case-p ,word)
                                 (some 'lower-case-p ,word)))
                           (,(strcat i " word-international")
                            (some 'latin-char-p ,word))))))
    (with (((i ctx) args)
           (((sent :sent) (prev-ner :prev) (prev2-ner :prev2) (quoted :quoted))
            ? ctx)
           ((prev2 prev cur next next2) (mapcar ^(? sent %)
                                                (range (- i 2) (+ i 3)))))
      (cons @cur.word
            (append (make-fs ("i sent-beg" (= i 2))
                             ("i sent-end" (= i (- (length sent) 3)))
                             ("i len" (length @cur.word))
                             ("i word" (maybe-word @cur.word))
                             ("i-1 word" (maybe-word @prev.word))
                             ("i-2 word" (maybe-word @prev2.word))
                             ("i+1 word" (maybe-word @next.word))
                             ("i+2 word" (maybe-word @next2.word))
                             ("i tag" (? *dict* @cur.word))
                             ("i-1 tag" (? *dict* @prev.word))
                             ("i-2 tag" (? *dict* @prev2.word))
                             ("i+1 tag" (? *dict* @next.word))
                             ("i+2 tag" (? *dict* @next2.word))
                             ("i-1 ner" prev-ner)
                             ("i-2 ner" prev2-ner)
                             ("i-1 ner + i-2 ner" prev-ner prev2-ner)
                             ("quoted" quoted))
                    (word-props "i" @cur.word)
                    (word-props "i-1" @prev.word)
                    (word-props "i+1" @next.word))))))

(defun maybe-word (word)
;  (when (< (length word) 3)
    word)

